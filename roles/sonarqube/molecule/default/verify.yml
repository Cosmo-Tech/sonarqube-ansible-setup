---
- name: Verify
  hosts: all
  become: true
  vars:
    sonarqube_port: "9000"
    sonarqube_base_dir: "/opt/sonarqube"

  tasks:
    - name: Verify Docker is installed and running
      ansible.builtin.service:
        name: docker
        state: started
      register: docker_status
      failed_when: not docker_status.status.ActiveState == "active"

    - name: Check Docker version
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false

    - name: Check Docker Compose is installed
      ansible.builtin.command: docker compose version
      register: compose_version
      changed_when: false
      failed_when: compose_version.rc != 0

    - name: Verify SonarQube directories exist
      ansible.builtin.stat:
        path: "{{ item }}"
      register: dir_check
      failed_when: not dir_check.stat.exists or not dir_check.stat.isdir
      loop:
        - "{{ sonarqube_base_dir }}/data"
        - "{{ sonarqube_base_dir }}/extensions"
        - "{{ sonarqube_base_dir }}/logs"
        - "{{ sonarqube_base_dir }}/temp"
        - "{{ sonarqube_base_dir }}/docker"

    - name: Verify Docker Compose file exists
      ansible.builtin.stat:
        path: "{{ sonarqube_base_dir }}/docker/docker-compose.yml"
      register: compose_file
      failed_when: not compose_file.stat.exists

    - name: Check if SonarQube container is running
      ansible.builtin.command: docker ps -q --filter "name=sonarqube"
      register: container_check
      changed_when: false
      failed_when: container_check.stdout == ""

    - name: Wait for SonarQube to be available
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}"
        status_code: 200
        timeout: 5
      register: sonarqube_response
      retries: 12
      delay: 10
      until: sonarqube_response.status == 200
      failed_when: false

    - name: Verify SonarQube API is responding
      ansible.builtin.uri:
        url: "http://localhost:{{ sonarqube_port }}/api/system/status"
        return_content: true
      register: api_response
      failed_when: "'status' not in api_response.content"

    - name: Check SonarQube logs for errors
      ansible.builtin.command: docker logs --tail 50 sonarqube
      register: logs
      changed_when: false
      failed_when: "'ERROR' in logs.stdout"
