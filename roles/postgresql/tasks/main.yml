---
# PostgreSQL role tasks

- name: Install PostgreSQL Python dependencies
  ansible.builtin.apt:
    name:
      - python3-psycopg2
      - libpq-dev
    state: present
    update_cache: true

- name: Install PostgreSQL {{ postgresql_version }}
  ansible.builtin.apt:
    name:
      - postgresql-{{ postgresql_version }}
      - postgresql-contrib-{{ postgresql_version }}
    state: present
    update_cache: true

- name: Ensure PostgreSQL service is running and enabled
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: true

- name: Check if PostgreSQL password is provided
  ansible.builtin.fail:
    msg: "SONARQUBE_DB_PASSWORD environment variable must be set"
  when: lookup('ansible.builtin.env', 'SONARQUBE_DB_PASSWORD', default='') == ''

- name: Set database credentials from environment
  ansible.builtin.set_fact:
    postgresql_user: "{{ lookup('ansible.builtin.env', 'SONARQUBE_DB_USER', default='sonarqube') }}"
    postgresql_password: "{{ lookup('ansible.builtin.env', 'SONARQUBE_DB_PASSWORD') }}"
  no_log: true

- name: Create database user for SonarQube
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ postgresql_user }}"
    password: "{{ postgresql_password }}"
    encrypted: true # Store password encrypted in database
    state: present

- name: Create database for SonarQube
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ postgresql_db }}"
    owner: "{{ postgresql_user }}"
    encoding: "{{ postgresql_encoding }}"
    template: "{{ postgresql_template }}"
    state: present

- name: Create schema for SonarQube
  become: true
  become_user: postgres
  community.postgresql.postgresql_query:
    db: "{{ postgresql_db }}"
    query: "CREATE SCHEMA IF NOT EXISTS {{ postgresql_schema }} AUTHORIZATION {{ postgresql_user }};"

- name: Grant privileges on schema to SonarQube user
  become: true
  become_user: postgres
  community.postgresql.postgresql_query:
    db: "{{ postgresql_db }}"
    query: "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA {{ postgresql_schema }} TO {{ postgresql_user }};"
